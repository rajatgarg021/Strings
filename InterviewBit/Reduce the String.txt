string Solution::solve(string A) 
{
   stack<char>st;
   int i=0;
   while(i<A.size())
   {
       if(st.empty())
          st.push(A[i]);
       else if(st.top()== A[i])
          st.pop();
       else
         st.push(A[i]);
       i++;     
   }
   string str;
   while(!st.empty())
     str+=st.top(),st.pop();
   reverse(str.begin(),str.end()); 
   if(str=="")
     return "empty";
  return str;     
}

// string Solution::solve(string A) {
    
//     stack<int> st; string str="";
    
//     for(int i=0; i<A.size(); i++)
//     {
//         if(st.empty() || st.top()!=A[i]){ st.push(A[i]); }
//         else{ st.pop(); }
//     }
    
//     while(!st.empty())
//     {
//         str+=st.top(); st.pop();
//     }
    
//     int l=str.size();
//     for(int i=0; i<=l/2-1; i++)
//     {
//         char ch=str[i]; str[i]=str[l-i-1];
//         str[l-i-1]=ch;
//     }
    
//     if(str==""){ str="empty"; }
    
//     return str;
// }
// // string Solution::solve(string s) {
    
// //     for(int i=0;i<(s.length()-1);i++)
// //     {
// //         if(s[i]==s[i+1])
// //         {
// //                 s.erase(i,2);
// //                 i=-1;
// //         }
// //     }
// //     return s.size() > 0?s:"empty";
// // }